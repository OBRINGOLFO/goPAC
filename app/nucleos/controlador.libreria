<?php
/**
 * @autor Rixio Danilo Iguarán Chourio.
 * @cédula-profesional 12196442
 * @correo-eletrónico atencion.clientes@obringolfo.com
 * @denominacion OBRAS INFORMÁTICAS DEL GOLFO
 * @empresa OBRINGOLFO S.A.S. DE C.V.
 * @proyecto  goPAC.
 * @copyright 2021
 */

    require_once PATH_CONFIGURACIONES."/sesion.configuracion";

//FUNCIONES PARA EL CONTROLADOR FRONTAL
/** *************************************************************************** **/
    function goControlador($MyControlador){
        try {

            $xClaseControlador = ucwords($MyControlador) . 'Controlador';
            $xArchivoControlador = PATH_CONTROLADORES . "/" . strtolower($MyControlador) . '.controlador';
            if(!is_file($xArchivoControlador)){
                $xArchivoControlador = PATH_CONTROLADORES . "/" . strtolower(CONTROLADOR_DEFECTO) . '.controlador';
            }
            require_once $xArchivoControlador;
            $xObjControlador = new $xClaseControlador();
            return $xObjControlador;

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
/** *************************************************************************** **/
    function goAccion($MyObjControlador, $MyAction){
        try {

            $MyAction = $MyAction;
            $MyObjControlador->$MyAction();

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
/** *************************************************************************** **/
    function exeAccion($MyObjControlador){
        try {
            if(isset($_GET["goAcc"]) && method_exists($MyObjControlador, $_GET["goAcc"])){
                goAccion($MyObjControlador, $_GET["goAcc"]);
            }else{
                goAccion($MyObjControlador, ACCION_DEFECTO);
            }

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
/** *************************************************************************** **/
    function getUUID(){
        try {

            $data = random_bytes(16);
            $data[6] = chr(ord($data[6]) & 0x0f | 0x40);
            $data[8] = chr(ord($data[8]) & 0x3f | 0x80);
            return vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4));

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
/** *************************************************************************** **/
    function auditar($texto){
        try {

            $strLOG = '';
            $filename = "auditoria [".date('d.m.Y')."].log";
            $dataFile = fopen(PATH_REGISTROS."/".$filename, "a+");
            $dia = date("d");
            $mes = date("m");
            $anno = date("Y");
            $hora = date("H");
            $minuto = date("i");
            $segundo = date("s");
            $tiempo = "\n".$dia."/".$mes."/".$anno." ".$hora.":".$minuto.":".$segundo;
            if($dataFile){
                $strLOG =   str_pad($tiempo, 19, " ", STR_PAD_BOTH)." | ".
                            str_pad(get_cliente_ip(), 15, " ", STR_PAD_BOTH)." | ".
                            str_pad(basename($_SERVER['PHP_SELF'], ".php"), 17, " ", STR_PAD_RIGHT)." | ".
                            utf8_decode($texto);

                fwrite($dataFile, $strLOG);
                fclose($dataFile);
            }

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
/** *************************************************************************** **/
   function get_cliente_ip() {
        try {

            $ipaddress = '';
            if (getenv('HTTP_CLIENT_IP'))
                $ipaddress = getenv('HTTP_CLIENT_IP');
            else if(getenv('HTTP_X_FORWARDED_FOR'))
                $ipaddress = getenv('HTTP_X_FORWARDED_FOR');
            else if(getenv('HTTP_X_FORWARDED'))
                $ipaddress = getenv('HTTP_X_FORWARDED');
            else if(getenv('HTTP_FORWARDED_FOR'))
                $ipaddress = getenv('HTTP_FORWARDED_FOR');
            else if(getenv('HTTP_FORWARDED'))
               $ipaddress = getenv('HTTP_FORWARDED');
            else if(getenv('REMOTE_ADDR'))
                $ipaddress = getenv('REMOTE_ADDR');
            else
                $ipaddress = 'UNKNOWN';
            return $ipaddress;

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
/** *************************************************************************** **/
    function mostrar_error($e){
        echo '
            <!DOCTYPE HTML>
            <html lang="es">
                <head>
                    <meta charset="utf-8"/>
                    <title>Error detectado</title>
                    <link href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
                    <script type="text/javascript" src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
                    <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
                    <style>
                        @import \'https://fonts.googleapis.com/css?family=Inconsolata\';

                        html {
                            min-height: 100%;
                        }

                        body {
                            box-sizing: border-box;
                            height: 100%;
                            background-color: #000000;
                            background-image: radial-gradient(#11581E, #041607), url("'.PATH_LIBRERIAS.'img/error.gif");
                            background-repeat: no-repeat;
                            background-size: cover;
                            font-family: \'Inconsolata\', Helvetica, sans-serif;
                            font-size: 1.5rem;
                            color: rgba(128, 255, 128, 0.8);
                            text-shadow:
                                    0 0 1ex rgba(51, 255, 51, 1),
                                    0 0 2px rgba(255, 255, 255, 0.8);
                        }

                        .noise {
                            pointer-events: none;
                            position: absolute;
                            width: 100%;
                            height: 100%;
                            background-image: url("'.PATH_LIBRERIAS.'img/error.gif");
                            background-repeat: no-repeat;
                            background-size: cover;
                            z-index: -1;
                            opacity: .02;
                        }

                        .overlay {
                            pointer-events: none;
                            position: absolute;
                            width: 100%;
                            height: 100%;
                            background:
                                    repeating-linear-gradient(
                                    180deg,
                                    rgba(0, 0, 0, 0) 0,
                                    rgba(0, 0, 0, 0.3) 50%,
                                    rgba(0, 0, 0, 0) 100%);
                            background-size: auto 4px;
                            z-index: 1;
                        }

                        .overlay::before {
                            content: "";
                            pointer-events: none;
                            position: absolute;
                            display: block;
                            top: 0;
                            left: 0;
                            right: 0;
                            bottom: 0;
                            width: 100%;
                            height: 100%;
                            background-image: linear-gradient(
                                    0deg,
                                    transparent 0%,
                                    rgba(32, 128, 32, 0.2) 2%,
                                    rgba(32, 128, 32, 0.8) 3%,
                                    rgba(32, 128, 32, 0.2) 3%,
                                    transparent 100%);
                            background-repeat: no-repeat;
                            animation: scan 7.5s linear 0s infinite;
                        }

                        @keyframes scan {
                            0%        { background-position: 0 -100vh; }
                            35%, 100% { background-position: 0 100vh; }
                        }

                        .terminal {
                            box-sizing: inherit;
                            position: absolute;
                            height: 100%;
                            width: 1000px;
                            max-width: 100%;
                            padding: 4rem;
                            text-transform: uppercase;
                        }

                        .output {
                            color: rgba(128, 255, 128, 0.8);
                            text-shadow:
                                    0 0 1px rgba(51, 255, 51, 0.4),
                                    0 0 2px rgba(255, 255, 255, 0.8);
                        }

                        .output::before {
                            content: "> ";
                        }

                        /*
                        .input {
                            color: rgba(192, 255, 192, 0.8);
                            text-shadow:
                                    0 0 1px rgba(51, 255, 51, 0.4),
                                    0 0 2px rgba(255, 255, 255, 0.8);
                        }

                        .input::before {
                            content: "$ ";
                        }
                        */

                        a {
                            color: #fff;
                            text-decoration: none;
                        }

                        a::before {
                            content: "[";
                        }

                        a::after {
                            content: "]";
                        }

                        .errorcode {
                            color: white;
                        }
                    </style>
                </head>
                <body>
                    <div class="noise"></div>
                    <div class="overlay"></div>
                    <div class="terminal">
                        <h1>Error <span class="errorcode">'.$e->getCode().'</span></h1>
                        <p class="output">'.$e->getMessage().'</p>
                        <p class="output">FILE: '.$e->getFile().'</p>
                        <p class="output">LINE: '.$e->getLine().'</p>
                        <p class="output">'.$e.'</p>
                    </div>
                </body>
            </html>
        ';
        exit();
    }
/** *************************************************************************** **/
    function goSesion(){
        if(!isset($_SESSION["time"])){ //No hay tiempo establecido
            $_SESSION["time"] = time(); //Asigno tiempo de arranque de la sesión
        }else{ //El tiempo de arranque ya se había asignado
            $xTmpActiva = time() - $_SESSION["time"];
            if($xTmpActiva > MAX_SESSION_TIEMPO){ //El tiempo de vida se ha superado
                session_destroy(); //Destruyo la sesión activa
                header("Location: /index.php?goExec=Index&action=index");
            }else{ //Aun en tiempo de vida y hay que reniciar contador
                $_SESSION["time"] = time(); //Reinicio tiempo de operación
            }
        }
        //VALIDANDO POR VARIABLES
        if(!isset($_SESSION["usuario"])){ //No hay tiempo establecido
            session_destroy(); //Destruyo la sesión activa
            header("Location: /index.php?goExec=Index&action=index");
        }
    }
/** *************************************************************************** **/
    function goConsola($data){
        if(is_array($data)) $output = "<script>console.log( 'Debug Objects: " . implode( ',', $data) . "' );</script>";
        else $output = "<script>console.log( 'Debug Objects: " . $data . "' );</script>";

        echo $output;
    }
/** *************************************************************************** **/
function load_Menu($mnu_load){
    $mnuFILE = PATH_AJAX."/".strtolower($mnu_load).".mnu";
    if(file_exists($mnuFILE)){
        ob_start(); //Activo la captura de buffer de salida
        require($mnuFILE); //requiero el archivo de MENU para que se ejecute
        $mnuCONTENT = ob_get_clean(); //retorno la salida del archivo ejecutado            
    }else{
        $mnuCONTENT = "[404] Menú no encontrado (".$mnuFILE.")";
    }
    return $mnuCONTENT;
}
/** *************************************************************************** **/
/** *************************************************************************** **/
/** *************************************************************************** **/
/** *************************************************************************** **/
/** *************************************************************************** **/
/** *************************************************************************** **/

?>