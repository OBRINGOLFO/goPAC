<?php
/**
 * @autor Rixio Danilo Iguarán Chourio.
 * @cédula-profesional 12196442
 * @correo-eletrónico atencion.clientes@obringolfo.com
 * @denominacion OBRAS INFORMÁTICAS DEL GOLFO
 * @empresa OBRINGOLFO S.A.S. DE C.V.
 * @proyecto  goPAC.
 * @copyright 2021
 */


class EmpresasControlador extends ControladorBase{
    public $conector;
    public $adapter;
    public $adapter_empresa;
    /** ****************************************************** **/
    public function __construct() {
        try {

            parent::__construct();
            $this->conector = new Conectar();
            $this->adapter  = $this->conector->conexion();

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
    /** ****************************************************** **/
    public function index(){
        try {

            chkSesion();
            //Creamos el objeto empresa
            $xEmpresas = new Empresas($this->adapter);
            if($_SESSION["usuario"]["uid_usuario"] == "5b661da4-5e66-4925-bdb3-e1f2c61ec549"){ //Es el usuario administrador y mostramos todas
                //Conseguimos todas las empresas
                $empresas_usuario = $xEmpresas->get_todas();
            }else{ //Es un usuario distinto al administrador
                //Buscamos solo las empresas autorizadas para éste usuario
                $empresas_usuario = $xEmpresas->get_empresas_usuario($_SESSION["usuario"]["uid_usuario"]);
            }
            $this->view("_header", array());
            $this->view("empresas", array("empresas_usuario" => $empresas_usuario));
            $this->view("_footer", array());

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
    /** ****************************************************** **/
    public function crear(){
        try {

            chkSesion();
            header('Content-Type: application/json; charset=UTF8');
            //almacenando el formulario de creación
            $txt_EMPRESA_UID            = strtoupper(trim(getUUID()));
            $txt_EMPRESA_NOMBRE         = strtoupper(trim($_POST['txt_EMPRESA_NOMBRE']));
            $txt_EMPRESA_DENOMINACION   = strtoupper(trim($_POST['txt_EMPRESA_DENOMINACION']));
            $txt_EMPRESA_RFC            = strtoupper(trim($_POST['txt_EMPRESA_RFC']));
            $txt_EMPRESA_CURP           = strtoupper(trim($_POST['txt_EMPRESA_CURP']));
            $txt_EMPRESA_REGIMEN        = trim($_POST['txt_EMPRESA_REGIMEN']);
            $txt_EMPRESA_IVA            = trim($_POST['txt_EMPRESA_IVA']);
            $txt_EMPRESA_IEPS           = trim($_POST['txt_EMPRESA_IEPS']);
            $txt_EMPRESA_OTRO           = trim($_POST['txt_EMPRESA_OTRO']);
            $txt_REPRESENTANTE_NOMBRE   = trim($_POST['txt_REPRESENTANTE_NOMBRE']);
            $txt_REPRESENTANTE_RFC      = strtoupper(trim($_POST['txt_REPRESENTANTE_RFC']));
            $txt_REPRESENTANTE_CURP     = strtoupper(trim($_POST['txt_REPRESENTANTE_CURP']));
            $txt_DIRECCION_UID          = strtoupper(trim(getUUID()));
            $txt_DIRECCION_CPOSTAL      = trim($_POST['txt_EMPRESA_CPOSTAL']);
            $txt_DIRECCION_COLONIA      = trim($_POST['txt_EMPRESA_COLONIA']);
            $txt_DIRECCION_CIUDAD       = trim($_POST['txt_EMPRESA_CIUDAD']);
            $txt_DIRECCION_MUNICIPIO    = trim($_POST['txt_EMPRESA_MUNICIPIO']);
            $txt_DIRECCION_ESTADO       = trim($_POST['txt_EMPRESA_ESTADO']);
            $txt_DIRECCION_PAIS         = trim($_POST['txt_EMPRESA_PAIS']);
            $txt_DIRECCION_VIALIDAD     = trim($_POST['txt_EMPRESA_VIALIDAD']);
            $txt_DIRECCION_CALLE        = trim($_POST['txt_EMPRESA_CALLE']);
            $txt_DIRECCION_EXTERIOR     = trim($_POST['txt_EMPRESA_EXTERIOR']);
            $txt_DIRECCION_INTERIOR     = trim($_POST['txt_EMPRESA_INTERIOR']);

            $xRespuesta = array();
            $xRespuesta["error"] = 1;
            $xRespuesta["mensaje"] = null;
            if(isset($txt_EMPRESA_RFC) && $txt_EMPRESA_RFC != ""){ //Validamos campos principales
                $connection = mysqli_connect(DB_HOST, DB_USUARIO, DB_SECRETO);
                if (!$connection) { //imposible conectar
                    $this->auditar('Imposible realizar la conexión: ' . mysqli_error($connection));
                    $xRespuesta["error"] = 410;
                    $xRespuesta["mensaje"] = "Imposible realizar la conexión con el servidor de datos.";
                }else{ //intentamos generar db
                    $db_NAME = explode("-", $txt_EMPRESA_UID);
                    $db_NAME = (string) end($db_NAME);
                    $sql = 'CREATE DATABASE ' . DB_PREFIJO . $db_NAME;
                    if (mysqli_query($connection, $sql)) { //db generada con éxito
                        //Registrando la empresa en el catalogo general
                        $xEmpresas = new Empresas($this->adapter);
                        $xEmpresas->setUid($txt_EMPRESA_UID);
                        //$xEmpresas->setRfc($txt_EMPRESA_RFC);
                        //$xEmpresas->setRazon($txt_EMPRESA_NOMBRE);
                        $xEmpresas->setDb_name($db_NAME);
                        $xCrear = $xEmpresas->registrar();
                        //Ejecutando el script de datos para estructura interna
                        $sql = 'USE ' . DB_PREFIJO . $db_NAME;
                        if (mysqli_query($connection, $sql)) { //db en uso
                            $directorio = PATH_SQL;
                            $scan_directorio = array_diff(scandir($directorio), array('..', '.'));
                            foreach ($scan_directorio as $key => $value) {
                                $this->auditar("Buscando estructura SQL: ".$value);
                                $sql_FILE = PATH_SQL . "/" . $value;
                                $this->auditar("Procesando SQL: " . $sql_FILE);
                                import_sql($sql_FILE, DB_PREFIJO . $db_NAME);
                            }
                        }
                        //Llenando los parametros iniciales de la empresa
                        $this->adapter_empresa  = $this->conector->conexion_empresa($db_NAME);
                        $MyEP = new Empresa_Parametros($this->adapter_empresa);
                        $MyEP->setUid($txt_EMPRESA_UID);
                        $MyEP->setRfc($txt_EMPRESA_RFC);
                        $MyEP->setRegimen($txt_EMPRESA_REGIMEN);
                        $MyEP->setUid_direccion($txt_DIRECCION_UID);                        
                        $MyEP->setCurp($txt_EMPRESA_CURP);
                        $MyEP->setRazon($txt_EMPRESA_NOMBRE);
                        $MyEP->setDenominacion($txt_EMPRESA_DENOMINACION);
                        $MyEP->setPeriodo("02");
                        $MyEP->setEjercicio("2022");
                        $MyEP->setTasa_otros($txt_EMPRESA_OTRO);
                        $MyEP->setTasa_ieps($txt_EMPRESA_IEPS);
                        $MyEP->setTasa_iva($txt_EMPRESA_IVA);
                        $MyEP->setRepresentante_nombre($txt_REPRESENTANTE_NOMBRE);
                        $MyEP->setRepresentante_rfc($txt_REPRESENTANTE_RFC);
                        $MyEP->setRepresentante_curp($txt_REPRESENTANTE_CURP);
                        $MyEP->registrar();
                        //Llenando los datos de dirección de la empresa
                        $MyED = new Empresa_Direcciones($this->adapter_empresa);
                        $MyED->setUid($txt_DIRECCION_UID);
                        $MyED->setTipo('P');
                        $MyED->setVialidad_tipo($txt_DIRECCION_VIALIDAD);
                        $MyED->setVialidad_nombre($txt_DIRECCION_CALLE);
                        $MyED->setExterior($txt_DIRECCION_EXTERIOR);
                        $MyED->setInterior($txt_DIRECCION_INTERIOR);
                        $MyED->setCodigo_postal($txt_DIRECCION_CPOSTAL);
                        $MyED->setColonia($txt_DIRECCION_COLONIA);
                        $MyED->setLocalidad($txt_DIRECCION_CIUDAD);
                        $MyED->setMunicipio($txt_DIRECCION_MUNICIPIO);
                        $MyED->setEntidad($txt_DIRECCION_ESTADO);
                        $MyED->setPais($txt_DIRECCION_PAIS);
                        $MyED->setReferencias('');
                        $MyED->registrar();
                        //Creando carpeta de documentos digitales de la empresa (ADD)
                        $ADD_EMPRESA = PATH_ADD . "/" . strtoupper($txt_EMPRESA_UID);
                        if(!is_dir($ADD_EMPRESA)){
                            mkdir($ADD_EMPRESA); //Creando carpeta principal
                        }
                        if(!is_dir($ADD_EMPRESA . "/facturas")){
                            mkdir($ADD_EMPRESA . "/facturas");      //Creando carpeta de comprobantes fiscales
                        }
                        if(!is_dir($ADD_EMPRESA . "/documentos")){
                            mkdir($ADD_EMPRESA . "/documentos");    //Creando carpeta de documentos generales
                        }
                        if(!is_dir($ADD_EMPRESA . "/imagenes")){
                            mkdir($ADD_EMPRESA . "/imagenes");      //Creando carpeta imagen empresarial
                        }
                        //Creando carpeta de respaldos de la empresa
                        $RESPALDOS_EMPRESA = PATH_RESPALDOS . "/" . strtoupper($txt_EMPRESA_UID);
                        if(!is_dir($RESPALDOS_EMPRESA)){
                            mkdir($RESPALDOS_EMPRESA); //Creando carpeta principal
                        }

                        //Auditando acciones
                        $this->auditar("Base de datos " . DB_PREFIJO . $db_NAME . " creada con éxito.");
                        $xRespuesta["error"] = 0;
                    }else{ //imposible generar db
                        $this->auditar('Error al crear la base de datos: ' . mysqli_error($connection));
                        $xRespuesta["error"] = 420;
                        $xRespuesta["mensaje"] = "Error al crear la empresa: " . mysqli_error($connection);
                    }   
                }
            }

            echo json_encode($xRespuesta);

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
    /** ****************************************************** **/
    public function borrar(){
        try {

            chkSesion();
            header('Content-Type: application/json; charset=UTF8');
            $this->auditar("Intentando eliminar la empresa: " . $_SESSION['empresa']['razon']);
            if(isset($_SESSION['empresa']['db_name']) && $_SESSION['empresa']['db_name'] != ""){ //Validamos db
                $connection = mysqli_connect(DB_HOST, DB_USUARIO, DB_SECRETO);
                if ($connection) { //imposible conectar
                    $sql = 'DROP DATABASE ' . DB_PREFIJO . $_SESSION['empresa']['db_name'];
                    if (mysqli_query($connection, $sql)) { //db generada con éxito
                        //Registrando la empresa en el catalogo general
                        $xEmpresas = new Empresas($this->adapter);
                        $xEmpresas->setDb_name($_SESSION['empresa']['db_name']);
                        $xCrear = $xEmpresas->eliminar();
                        //Borrando carpeta de documentos digitales de la empresa (ADD)
                        $ADD_EMPRESA = PATH_ADD . "/" . strtoupper($_SESSION['empresa']['uid']);
                        if(is_dir($ADD_EMPRESA)){
                            rmDir_rf($ADD_EMPRESA); //Borrando carpeta principal de forma recursiva
                        }
                        //Borrando carpeta de respaldos de la empresa
                        $RESPALDOS_EMPRESA = PATH_RESPALDOS . "/" . strtoupper($_SESSION['empresa']['uid']);
                        if(is_dir($RESPALDOS_EMPRESA)){
                            rmDir_rf($RESPALDOS_EMPRESA); //Borrando carpeta principal de forma recursiva
                        }

                        $this->auditar("Base de datos " . DB_PREFIJO .  $_SESSION['empresa']['db_name'] . " eliminada con éxito.");
                        $xRespuesta["error"] = 0;
                    }   
                }
                goRedirect("Empresas", "cerrar");
            }


        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
    /** ****************************************************** **/
    public function abrir(){
        try {
            
            chkSesion();
            header('Content-Type: application/json; charset=UTF8');
            $xRespuesta = array();
            $db_NAME = $_POST["db_NAME"];
            if(isset($_POST["db_NAME"]) && ($_POST["db_NAME"] != "")){ //tenemos un RFC
                //Conectamos con la DB de la empresa
                $this->adapter_empresa  = $this->conector->conexion_empresa($db_NAME);
                //Cargamos la clase de control para "PARAMETROS"
                $MyEMPRESA = new Empresa_Parametros($this->adapter_empresa);
                //Leemos los parametros generales de la empresa
                $parametros_empresa = $MyEMPRESA->get_parametros($db_NAME);
                if($parametros_empresa){
                    /** REGISTRANDO LA VARIABLE DE SESIÓN DE LA EMPRESA **/
                    $_SESSION['empresa'] = (array) $parametros_empresa;
                    $_SESSION['empresa']['db_name'] = strtoupper($_POST["db_NAME"]);
                    $xRespuesta["error"] = 0;
                }else{
                    /** ****************************************************** **/  
                    $xRespuesta["error"] = 410;

                }
            }else{
                $xRespuesta["error"] = 400; //No hay empresa cargada
            }
            echo json_encode($xRespuesta);

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
    /** ****************************************************** **/
    public function cerrar(){
        try {

            chkSesion();
            header('Content-Type: application/json; charset=UTF8');
            if(isset($_SESSION['empresa'])){
                unset($_SESSION['empresa']);
            }

            goRedirect("Empresas", "index");

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
    /** ****************************************************** **/
    public function respaldar(){
        try {

            chkSesion();
            header('Content-Type: application/json; charset=UTF8');
            $xRespuesta = array();
            if(isset($_POST['txt_FILEBACKUP']) && $_POST['txt_FILEBACKUP'] != ''){
                $backup = new DB_Backup(DB_HOST, DB_USUARIO, DB_SECRETO, $_SESSION['empresa']['uid'], $_POST['txt_FILEBACKUP'], 'utf8');
                $result = $backup->backupTables();
                if($result){
                    $xRespuesta["error"] = 0;
                }else{
                    $xRespuesta["error"] = 400;
                    $xRespuesta["mensaje"] = "Error al generar el archivo de respaldo.";
                }    
            }else{
                $xRespuesta["error"] = 410;
                $xRespuesta["mensaje"] = "Error en la solicitud del respaldo.";
            }
            
            echo json_encode($xRespuesta);

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
    /** ****************************************************** **/
    public function restaurar(){
        try {

            chkSesion();
            header('Content-Type: application/json; charset=UTF8');
            $xRespuesta = array();
            if($_POST['txt_FROM'] == "listaRESPALDOS"){ //el usuario seleccionó un respaldo de la lista
                $this->auditar('Recuperación desde la lista de respaldos');
                if($_POST['txt_FNAME'] != ""){ //tenemos un nombre de archivo
                    $txt_FNAME = PATH_RESPALDOS . "/" . strtoupper($_SESSION['empresa']['uid']) . "/" . $_POST['txt_FNAME'];
                    $this->auditar($txt_FNAME);
                    //$xRespuesta["error"] = 0;
                }
            }else{ //el usuario cargó un archivo de respaldo
                $this->auditar('Recuperación desde archivo cargado por usuario ');
                if(!file_exists(PATH_RESPALDOS . "/" . strtoupper($_SESSION['empresa']['uid']))){
                    mkdir(PATH_RESPALDOS . "/" . strtoupper($_SESSION['empresa']['uid']));
                }
                $txt_FNAME = PATH_RESPALDOS . "/" . strtoupper($_SESSION['empresa']['uid']) . "/" . $_FILES['txt_FILE']['name'];
                $this->auditar("moviendo: ".$txt_FNAME);
                move_uploaded_file( $_FILES['txt_FILE']['tmp_name'], $txt_FNAME);
                //$xRespuesta["error"] = 0;
            }
            $restore = new DB_Restore(DB_HOST, DB_USUARIO, DB_SECRETO, $_SESSION['empresa']['uid'], $txt_FNAME, 'utf8');
            $result = $restore->restoreDb();
            if($result){
                $xRespuesta["error"] = 0;
                //Conectamos con la DB de la empresa
                $this->adapter_empresa  = $this->conector->conexion_empresa($_SESSION['empresa']['db_name']);
                //Cargamos la clase de control para "PARAMETROS"
                $MyEMPRESA = new Empresa_Parametros($this->adapter_empresa);
                //Leemos los parametros generales de la empresa
                $MyEMPRESA->restaura_uid($_SESSION['empresa']['uid']);
                $this->auditar("El resultado de la restauración es exitoso");
            }else{
                $xRespuesta["error"] = 400;
                $xRespuesta["mensaje"] = "Error al restaurar el respaldo de la empresa.";
                $this->auditar("El resultado de la restauración es erroneo");
            }    

            echo json_encode($xRespuesta);

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
    /** ****************************************************** **/
    public function get_postal(){
        try {

            chkSesion();
            header('Content-Type: application/json; charset=UTF8');
            $CP_Code = $_POST['cp'];
            $xRespuesta = array();
            if(($CP_Code != "") && ($CP_Code < 99999)){
                $xCodigoPostal = new CodigoPostal($this->adapter);
                $MyCODE = $xCodigoPostal->getBy("cp", $CP_Code);
                if($MyCODE){
                    $xRespuesta["error"] = 0;
                    $xRespuesta["data"] = $MyCODE;
                    //array_push($xRespuesta["data"], $MyCODE);
                }else{
                    $xRespuesta["error"] = 300;
                }
            }else{
                $xRespuesta["error"] = 400;
            }
            echo json_encode($xRespuesta);

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }

    /**
     * CONTROL DE INTERFACES PARA LA EMPRESA (Carga dinamica en ventanas de usuario)
     *  **/
    /** ****************************************************** **/
     public function iface_nuevo(){
        try {

            chkSesion();
            //Cargando catálogo de [REGIMEN FISCAL]
            $xRegimen = new SatRegimenFiscal($this->adapter);
            //Cargando catálogo de [TIPOS DE VIALIDAD]
            $xTipo_Vialidad = new Tipo_Vialidad($this->adapter);



            $this->view("empresas_nuevo", array(
                "RegimenFiscal" => $xRegimen->getAll(),
                "TipoVialidad"  => $xTipo_Vialidad->getAll()
            ));

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
    /** ****************************************************** **/
    public function iface_respaldar(){
        try {

            chkSesion();
            $this->view("empresas_respaldar", array(null));

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
    /** ****************************************************** **/
    public function iface_restaurar(){
        try {

            chkSesion();
            $this->view("empresas_restaurar", array(null));

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }

    
}
?>
